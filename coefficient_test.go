package decimal

import (
	"math"
	"testing"
)

func TestFint_lsh(t *testing.T) {
	cases := []struct {
		coef  fint
		shift int
		want  fint
	}{
		{0, 0, 0},
		{10, 0, 10},
		{0, 1, 0},
		{10, 1, 100},
	}
	for _, c := range cases {
		got, _ := c.coef.lsh(c.shift)
		if got != c.want {
			t.Errorf("%v.lsh(%v) = %v, want %v", c.coef, c.shift, got, c.want)
		}
	}
}

func TestFint_rshEven(t *testing.T) {
	cases := []struct {
		coef  fint
		shift int
		want  fint
	}{
		{1, 0, 1},
		{20, 1, 2},
		{18, 1, 2},
		{15, 1, 2},
		{12, 1, 1},
		{10, 1, 1},
		{8, 1, 1},
		{5, 1, 0},
		{2, 1, 0},
		{9999999999999999999, 19, 1},
	}
	for _, c := range cases {
		got := c.coef.rshEven(c.shift)
		if got != c.want {
			t.Errorf("%v.rshEven(%v) = %v, want %v", c.coef, c.shift, got, c.want)
		}
	}
}

func TextFint_rshDown(t *testing.T) {
	cases := []struct {
		coef  fint
		shift int
		want  fint
	}{
		{1, 0, 1},
		{20, 1, 2},
		{18, 1, 1},
		{15, 1, 1},
		{12, 1, 1},
		{10, 1, 1},
		{8, 1, 0},
		{5, 1, 0},
		{2, 1, 0},
		{9999999999999999999, 19, 0},
	}
	for _, c := range cases {
		got := c.coef.rshDown(c.shift)
		if got != c.want {
			t.Errorf("%v.rshDown(%v) = %v, want %v", c.coef, c.shift, got, c.want)
		}
	}
}

func TextFint_rshUp(t *testing.T) {
	cases := []struct {
		coef  fint
		shift int
		want  fint
	}{
		{1, 0, 1},
		{20, 1, 2},
		{18, 1, 2},
		{15, 1, 2},
		{12, 1, 2},
		{10, 1, 1},
		{8, 1, 1},
		{5, 1, 1},
		{2, 1, 1},
		{9999999999999999999, 19, 1},
	}
	for _, c := range cases {
		got := c.coef.rshUp(c.shift)
		if got != c.want {
			t.Errorf("%v.rshUp(%v) = %v, want %v", c.coef, c.shift, got, c.want)
		}
	}
}

func TestFint_prec(t *testing.T) {
	cases := []struct {
		coef fint
		want int
	}{
		{0, 0},
		{1, 1},
		{9, 1},
		{10, 2},
		{99, 2},
		{100, 3},
		{999, 3},
		{1000, 4},
		{9999, 4},
		{10000, 5},
		{99999, 5},
		{100000, 6},
		{999999, 6},
		{1000000, 7},
		{9999999, 7},
		{10000000, 8},
		{99999999, 8},
		{100000000, 9},
		{999999999, 9},
		{1000000000, 10},
		{9999999999, 10},
		{10000000000, 11},
		{99999999999, 11},
		{100000000000, 12},
		{999999999999, 12},
		{1000000000000, 13},
		{9999999999999, 13},
		{10000000000000, 14},
		{99999999999999, 14},
		{100000000000000, 15},
		{999999999999999, 15},
		{1000000000000000, 16},
		{9999999999999999, 16},
		{10000000000000000, 17},
		{99999999999999999, 17},
		{100000000000000000, 18},
		{999999999999999999, 18},
		{1000000000000000000, 19},
		{9999999999999999999, 19},
		{10000000000000000000, 20},
		{math.MaxUint64, 20},
	}
	for _, c := range cases {
		got := c.coef.prec()
		if got != c.want {
			t.Errorf("%v.prec() = %v, want %v", c.coef, got, c.want)
		}
	}
}

func TestFint_hasPrec(t *testing.T) {
	cases := []struct {
		coef fint
		prec int
		want bool
	}{
		{0, 0, true},
		{0, 1, false},
		{0, 2, false},
		{1, 0, true},
		{1, 1, true},
		{1, 2, false},
		{9, 0, true},
		{9, 1, true},
		{9, 2, false},
		{10, 0, true},
		{10, 1, true},
		{10, 2, true},
		{10, 3, false},
		{99, 0, true},
		{99, 1, true},
		{99, 2, true},
		{99, 3, false},
		{10000000000000000, 19, false},
		{100000000000000000, 19, false},
		{1000000000000000000, 19, true},
		{10000000000000000000, 19, true},
	}
	for _, c := range cases {
		got := c.coef.hasPrec(c.prec)
		if got != c.want {
			t.Errorf("%v.hasPrec(%v) = %v, want %v", c.coef, c.prec, got, c.want)
		}
	}
}

func TestSint_rshEven(t *testing.T) {
	cases := []struct {
		coef  string
		shift int
		want  string
	}{
		{"1", 0, "1"},
		{"18", 1, "2"},
		{"15", 1, "2"},
		{"12", 1, "1"},
		{"8", 1, "1"},
		{"5", 1, "0"},
		{"2", 1, "0"},
		{"9999999999999999999", 19, "1"},
	}
	for _, c := range cases {
		want := mustParseSint(c.want)
		got := mustParseSint(c.coef)
		got.rshEven(got, c.shift)
		if got.cmp(want) != 0 {
			t.Errorf("%v.rshEven(%v) = %v, want %v", c.coef, c.shift, got, want)
		}
	}
}

func TestSint_prec(t *testing.T) {

	t.Run("valid", func(t *testing.T) {
		cases := []struct {
			coef string
			want int
		}{
			{"0", 0},
			{"1", 1},
			{"9", 1},
			{"10", 2},
			{"99", 2},
			{"100", 3},
			{"999", 3},
			{"1000", 4},
			{"9999", 4},
			{"10000", 5},
			{"99999", 5},
			{"100000", 6},
			{"999999", 6},
			{"1000000", 7},
			{"9999999", 7},
			{"10000000", 8},
			{"99999999", 8},
			{"100000000", 9},
			{"999999999", 9},
			{"1000000000", 10},
			{"9999999999", 10},
			{"10000000000", 11},
			{"99999999999", 11},
			{"100000000000", 12},
			{"999999999999", 12},
			{"1000000000000", 13},
			{"9999999999999", 13},
			{"10000000000000", 14},
			{"99999999999999", 14},
			{"100000000000000", 15},
			{"999999999999999", 15},
			{"1000000000000000", 16},
			{"9999999999999999", 16},
			{"10000000000000000", 17},
			{"99999999999999999", 17},
			{"100000000000000000", 18},
			{"999999999999999999", 18},
			{"1000000000000000000", 19},
			{"9999999999999999999", 19},
			{"10000000000000000000", 20},
			{"99999999999999999999", 20},
			{"100000000000000000000", 21},
			{"999999999999999999999", 21},
			{"1000000000000000000000", 22},
			{"9999999999999999999999", 22},
			{"10000000000000000000000", 23},
			{"99999999999999999999999", 23},
			{"100000000000000000000000", 24},
			{"999999999999999999999999", 24},
			{"1000000000000000000000000", 25},
			{"9999999999999999999999999", 25},
			{"10000000000000000000000000", 26},
			{"99999999999999999999999999", 26},
			{"100000000000000000000000000", 27},
			{"999999999999999999999999999", 27},
			{"1000000000000000000000000000", 28},
			{"9999999999999999999999999999", 28},
			{"10000000000000000000000000000", 29},
			{"99999999999999999999999999999", 29},
			{"100000000000000000000000000000", 30},
			{"999999999999999999999999999999", 30},
			{"1000000000000000000000000000000", 31},
			{"9999999999999999999999999999999", 31},
			{"10000000000000000000000000000000", 32},
			{"99999999999999999999999999999999", 32},
			{"100000000000000000000000000000000", 33},
			{"999999999999999999999999999999999", 33},
			{"1000000000000000000000000000000000", 34},
			{"9999999999999999999999999999999999", 34},
			{"10000000000000000000000000000000000", 35},
			{"99999999999999999999999999999999999", 35},
			{"100000000000000000000000000000000000", 36},
			{"999999999999999999999999999999999999", 36},
			{"1000000000000000000000000000000000000", 37},
			{"9999999999999999999999999999999999999", 37},
			{"10000000000000000000000000000000000000", 38},
			{"99999999999999999999999999999999999999", 38},
			{"100000000000000000000000000000000000000", 39},
			{"999999999999999999999999999999999999999", 39},
			{"1000000000000000000000000000000000000000", 40},
			{"9999999999999999999999999999999999999999", 40},
			{"10000000000000000000000000000000000000000", 41},
			{"99999999999999999999999999999999999999999", 41},
			{"100000000000000000000000000000000000000000", 42},
			{"999999999999999999999999999999999999999999", 42},
			{"1000000000000000000000000000000000000000000", 43},
			{"9999999999999999999999999999999999999999999", 43},
			{"10000000000000000000000000000000000000000000", 44},
			{"99999999999999999999999999999999999999999999", 44},
			{"100000000000000000000000000000000000000000000", 45},
			{"999999999999999999999999999999999999999999999", 45},
			{"1000000000000000000000000000000000000000000000", 46},
			{"9999999999999999999999999999999999999999999999", 46},
			{"10000000000000000000000000000000000000000000000", 47},
			{"99999999999999999999999999999999999999999999999", 47},
			{"100000000000000000000000000000000000000000000000", 48},
			{"999999999999999999999999999999999999999999999999", 48},
			{"1000000000000000000000000000000000000000000000000", 49},
			{"9999999999999999999999999999999999999999999999999", 49},
			{"10000000000000000000000000000000000000000000000000", 50},
			{"99999999999999999999999999999999999999999999999999", 50},
			{"100000000000000000000000000000000000000000000000000", 51},
			{"999999999999999999999999999999999999999999999999999", 51},
			{"1000000000000000000000000000000000000000000000000000", 52},
			{"9999999999999999999999999999999999999999999999999999", 52},
			{"10000000000000000000000000000000000000000000000000000", 53},
			{"99999999999999999999999999999999999999999999999999999", 53},
			{"100000000000000000000000000000000000000000000000000000", 54},
			{"999999999999999999999999999999999999999999999999999999", 54},
			{"1000000000000000000000000000000000000000000000000000000", 55},
			{"9999999999999999999999999999999999999999999999999999999", 55},
			{"10000000000000000000000000000000000000000000000000000000", 56},
			{"99999999999999999999999999999999999999999999999999999999", 56},
			{"100000000000000000000000000000000000000000000000000000000", 57},
			{"999999999999999999999999999999999999999999999999999999999", 57},
			{"1000000000000000000000000000000000000000000000000000000000", 58},
			{"9999999999999999999999999999999999999999999999999999999999", 58},
			{"10000000000000000000000000000000000000000000000000000000000", 59},
			{"99999999999999999999999999999999999999999999999999999999999", 59},
			{"100000000000000000000000000000000000000000000000000000000000", 60},
			{"999999999999999999999999999999999999999999999999999999999999", 60},
			{"1000000000000000000000000000000000000000000000000000000000000", 61},
			{"9999999999999999999999999999999999999999999999999999999999999", 61},
			{"10000000000000000000000000000000000000000000000000000000000000", 62},
			{"99999999999999999999999999999999999999999999999999999999999999", 62},
			{"100000000000000000000000000000000000000000000000000000000000000", 63},
			{"999999999999999999999999999999999999999999999999999999999999999", 63},
			{"1000000000000000000000000000000000000000000000000000000000000000", 64},
			{"9999999999999999999999999999999999999999999999999999999999999999", 64},
			{"10000000000000000000000000000000000000000000000000000000000000000", 65},
			{"99999999999999999999999999999999999999999999999999999999999999999", 65},
			{"100000000000000000000000000000000000000000000000000000000000000000", 66},
			{"999999999999999999999999999999999999999999999999999999999999999999", 66},
			{"1000000000000000000000000000000000000000000000000000000000000000000", 67},
			{"9999999999999999999999999999999999999999999999999999999999999999999", 67},
			{"10000000000000000000000000000000000000000000000000000000000000000000", 68},
			{"99999999999999999999999999999999999999999999999999999999999999999999", 68},
			{"100000000000000000000000000000000000000000000000000000000000000000000", 69},
			{"999999999999999999999999999999999999999999999999999999999999999999999", 69},
			{"1000000000000000000000000000000000000000000000000000000000000000000000", 70},
			{"9999999999999999999999999999999999999999999999999999999999999999999999", 70},
			{"10000000000000000000000000000000000000000000000000000000000000000000000", 71},
			{"99999999999999999999999999999999999999999999999999999999999999999999999", 71},
			{"100000000000000000000000000000000000000000000000000000000000000000000000", 72},
			{"999999999999999999999999999999999999999999999999999999999999999999999999", 72},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000", 73},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999", 73},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000", 74},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999", 74},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000", 75},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999", 75},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000", 76},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999", 76},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000", 77},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999", 77},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000", 78},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999", 78},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000", 79},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999", 79},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000", 80},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999999", 80},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000000", 81},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999999", 81},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000000", 82},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999999", 82},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000000", 83},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999", 83},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000000000", 84},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 84},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 85},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 85},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 86},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 86},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 87},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 87},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 88},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 88},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 89},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 89},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 90},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 90},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 91},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 91},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 92},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 92},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 93},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 93},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 94},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 94},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 95},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 95},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 96},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 96},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 97},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 97},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 98},
			{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 98},
			{"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 99},
			{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 99},
			{"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 100},
			{"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 100},
			{"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 101},
		}
		for _, c := range cases {
			b := mustParseSint(c.coef)
			got := b.prec()
			if got != c.want {
				t.Errorf("%q.prec() = %v, want %v", c.coef, got, c.want)
			}
		}
	})

	t.Run("panic", func(t *testing.T) {
		cases := map[string]string{
			"too long 1": "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
			"too long 2": "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
		}
		for name, c := range cases {
			b := mustParseSint(c)
			t.Run(name, func(t *testing.T) {
				defer func() {
					if r := recover(); r == nil {
						t.Errorf("%q.prec() did not panic", c)
					}
				}()
				t.Logf("%q.prec() = %v", c, b.prec())
			})
		}
	})
}

func TestSint_hasPrec(t *testing.T) {
	cases := []struct {
		coef string
		prec int
		want bool
	}{
		{"0", 0, true},
		{"0", 1, false},
		{"1", 0, true},
		{"1", 1, true},
		{"1", 2, false},
		{"10", 0, true},
		{"10", 1, true},
		{"10", 2, true},
		{"10", 3, false},
		{"100000000000000000", 19, false},  // 18 digits
		{"1000000000000000000", 19, true},  // 19 digits
		{"10000000000000000000", 19, true}, // 20 digits
	}
	for _, c := range cases {
		got := mustParseSint(c.coef).hasPrec(c.prec)
		if got != c.want {
			t.Errorf("%v.hasPrec(%v) = %v, want %v", c.coef, c.prec, got, c.want)
		}
	}
}
